on:
  push:
  pull_request:

name: Tests

jobs:
  # checks:
  #   name: Checks
  #   runs-on: ubuntu-latest
  #   container: fedorapython/fedora-python-tox:latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         dnf install -y pre-commit git libpq-devel
  #         pip install poetry>=1.2

  #     - name: Mark the working directory as safe for Git
  #       run: git config --global --add safe.directory $PWD

  #     - name: Install the project
  #       run: poetry install

  #     - name: Run pre-commit checks
  #       run: pre-commit run --all-files

  # licenses:
  #   name: Licenses
  #   runs-on: ubuntu-latest
  #   container: fedorapython/fedora-python-tox:latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: dnf install -y krb5-devel tox libpq-devel

  #     - name: Run the licenses check
  #       run: tox -e licenses

  # docs:
  #   name: Documentation
  #   runs-on: ubuntu-latest
  #   container: fedorapython/fedora-python-tox:latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: dnf install -y krb5-devel tox libpq-devel

  #     - name: Build the docs
  #       run: tox -e docs

  #     # - name: Save the docs
  #     #   uses: actions/upload-artifact@v2
  #     #   with:
  #     #     name: docs
  #     #     path: sqlalchemy_helpers/docs/_build/html

  # unit-tests:
  #   name: Unit tests
  #   runs-on: ubuntu-latest
  #   container: fedorapython/fedora-python-tox:latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: dnf install -y krb5-devel tox libpq-devel

  #     - name: Run the tests
  #       run: tox -e ${{ matrix.pyver }}-${{ matrix.sqlaver }}

  #     # - name: Upload coverage to Codecov
  #     #   uses: codecov/codecov-action@v1
  #     #   with:
  #     #     name: ${{ matrix.tox_env }}
  #     #     flags: unittests
  #     #     env_vars: PYTHON
  #     #     fail_ci_if_error: true

  #   strategy:
  #     matrix:
  #       pyver:
  #         - py38
  #         - py39
  #         - py310
  #         - py311
  #       sqlaver:
  #         - sqla1
  #         - sqla2

  # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    # needs:
    #   - checks
    #   - docs
    #   - licenses
    #   - unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: python3 -m pip install poetry --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Extract and save the version
        id: extract-version
        run: |
          echo -n VERSION= >> "$GITHUB_OUTPUT"
          python3 -m poetry version -s >> "$GITHUB_OUTPUT"


  # publish-to-pypi:
  #   name: Publish to PyPI ðŸš€
  #   if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc')  # only publish to PyPI on final tag pushes
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/sqlalchemy-helpers
  #   permissions:
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing
  #   steps:
  #     - name: Download all the dists
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: python-package-distributions
  #         path: dist/
  #     - name: Publish distribution to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Create a GitHub Release ðŸ“¢
    needs:
      # - publish-to-pypi
      - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Extract changelog section
        id: extract-changelog
        uses: sean0x42/markdown-extract@v2
        with:
          file: docs/release_notes.md
          pattern: '## Version [${{ steps.extract-version.outputs.VERSION }}].*$'
          no-print-matched-heading: true
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: dist/*
          fail_on_unmatched_files: true
          body: "${{ steps.extract-changelog.outputs.markdown }}"
